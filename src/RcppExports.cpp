// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fenrir_optim
Rcpp::List fenrir_optim(Eigen::MatrixXd Y_obs, Eigen::VectorXd observed_TT, Eigen::VectorXd N_total_list, Eigen::MatrixXd F, Rcpp::List G, Eigen::VectorXd gamma, Rcpp::List W, Rcpp::List M0, Rcpp::List C0, Eigen::MatrixXd Xi0, double v0, Eigen::MatrixXd init, Rcpp::CharacterVector log_probs_path, int num_dirsamples, double pseudocount, double eps_f, double eps_g, int max_iter);
RcppExport SEXP _fenrir_fenrir_optim(SEXP Y_obsSEXP, SEXP observed_TTSEXP, SEXP N_total_listSEXP, SEXP FSEXP, SEXP GSEXP, SEXP gammaSEXP, SEXP WSEXP, SEXP M0SEXP, SEXP C0SEXP, SEXP Xi0SEXP, SEXP v0SEXP, SEXP initSEXP, SEXP log_probs_pathSEXP, SEXP num_dirsamplesSEXP, SEXP pseudocountSEXP, SEXP eps_fSEXP, SEXP eps_gSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y_obs(Y_obsSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type observed_TT(observed_TTSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type N_total_list(N_total_listSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type F(FSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type W(WSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type M0(M0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Xi0(Xi0SEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type init(initSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type log_probs_path(log_probs_pathSEXP);
    Rcpp::traits::input_parameter< int >::type num_dirsamples(num_dirsamplesSEXP);
    Rcpp::traits::input_parameter< double >::type pseudocount(pseudocountSEXP);
    Rcpp::traits::input_parameter< double >::type eps_f(eps_fSEXP);
    Rcpp::traits::input_parameter< double >::type eps_g(eps_gSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(fenrir_optim(Y_obs, observed_TT, N_total_list, F, G, gamma, W, M0, C0, Xi0, v0, init, log_probs_path, num_dirsamples, pseudocount, eps_f, eps_g, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// fenrir_smooth
Rcpp::List fenrir_smooth(Eigen::MatrixXd eta, Eigen::MatrixXd F, Rcpp::List G, Eigen::VectorXd gamma, Rcpp::List W, Rcpp::List M0, Rcpp::List C0, Eigen::MatrixXd Xi0, double v0, Eigen::VectorXd observed_TT, Eigen::VectorXd N_total_list, int seed);
RcppExport SEXP _fenrir_fenrir_smooth(SEXP etaSEXP, SEXP FSEXP, SEXP GSEXP, SEXP gammaSEXP, SEXP WSEXP, SEXP M0SEXP, SEXP C0SEXP, SEXP Xi0SEXP, SEXP v0SEXP, SEXP observed_TTSEXP, SEXP N_total_listSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type F(FSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type G(GSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type W(WSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type M0(M0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Xi0(Xi0SEXP);
    Rcpp::traits::input_parameter< double >::type v0(v0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type observed_TT(observed_TTSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type N_total_list(N_total_listSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(fenrir_smooth(eta, F, G, gamma, W, M0, C0, Xi0, v0, observed_TT, N_total_list, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fenrir_fenrir_optim", (DL_FUNC) &_fenrir_fenrir_optim, 18},
    {"_fenrir_fenrir_smooth", (DL_FUNC) &_fenrir_fenrir_smooth, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_fenrir(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
